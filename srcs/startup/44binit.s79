#include "option.s79"

;Watchdog Timer
#define WTCON	0x01d30000
;Interrupt Controller
#define INTMSK	0x01e0000c
#define I_ISPC  0x01e00024
;Clock Controller
#define PLLCON	0x01d80000
#define CLKCON	0x01d80004
#define LOCKTIME 0x01d8000c
;BDMA
#define BDIDES0  0x01f80008
#define BDIDES1  0x01f80028


#define MODE_BITS  0x1F    ; Bit mask for mode bits in CPSR
#define USR_MODE  0x10    ; User mode
#define FIQ_MODE  0x11    ; Fast Interrupt Request mode
#define IRQ_MODE  0x12    ; Interrupt Request mode
#define SVC_MODE  0x13    ; Supervisor mode
#define ABT_MODE  0x17    ; Abort mode
#define UND_MODE  0x1B    ; Undefined Instruction mode
#define SYS_MODE  0x1F    ; System mode
NOINT	     EQU	0xc0

    ;**********************
    ;    Module ?RESET    *
    ;**********************
    EXTERN       main
    EXTERN      .bss$$Base
    EXTERN      .bss$$Limit
    EXTERN      .data$$Base
    EXTERN      .data$$Limit
    EXTERN      .data_init$$Base
    EXTERN      .data_init$$Limit
    EXTERN      .rodata$$Base
    EXTERN      .rodata$$Limit
    PUBLIC  __iar_program_start

    ;; Forward declaration of sections.
    SECTION IRQ_STACK:DATA:NOROOT(3)
    SECTION ABT_STACK:DATA:NOROOT(3)
    SECTION SVC_STACK:DATA:NOROOT(3)
    SECTION UND_STACK:DATA:NOROOT(3)
    SECTION FIQ_STACK:DATA:NOROOT(3)
    SECTION CSTACK:DATA:NOROOT(3)

    SECTION .intvec:CODE:NOROOT(2)
    CODE32
         
__iar_program_start 
    b ResetHandler
    b HandlerUndef  ;handlerUndef
    b HandlerSWI    ;SWI interrupt handler
    b HandlerPabort ;handlerPAbort
    b HandlerDabort ;handlerDAbort
    b .				;handlerReserved
    b HandlerIRQ 
    b HandlerFIQ


    SECTION	.readonly:CODE:NOROOT(2)
    ARM


ResetHandler
   ldr      r0, =WTCON
   ldr      r1, =0x0;
   str      r1, [r0]          ; Non-vectored, IRQ disable, FIQ disable
    
   ldr	    r0,=INTMSK
    ldr	    r1,=0x07ffffff  	;mask all interrupts
    str	    r1,[r0]

    ldr	    r0,=I_ISPC
    ldr	    r1,=0x03ffffff  	;clear all pending bits
    str	    r1,[r0]    

    ldr     r0,=LOCKTIME        ;configure PLL and clocks
    ldr     r1,=0xfff
    str     r1,[r0]

    ;ldr     r0,=PLLCON
    ;ldr     r1,=((M_DIV<<12)+(P_DIV<<4)+S_DIV)
    ;str     r1,[r0]             ;Fin=8MHz, Fout=50MHz
    
    ldr     r0,=BDIDES0        	;change BDMACON reset value for BDMA0
    ldr     r1,=0x40000000
    str     r1,[r0]

    ldr     r0,=BDIDES1         ;change BDMACON reset value for BDMA1
    ldr     r1,=0x40000000
    str     r1,[r0]
    
    ;Initialize Memory Controller
    ;ldr     r0,=SMRDATA         ;load link-time address of SMRDATA
    ;ldmia   r0,{r1-r13}         ;load SMRDATA to r1~r13
    ;ldr	    r0,=0x01c80000	;BWSCON, 1st register of memory controller
    ;stmia   r0,{r1-r13}         ;store data in r1~r13 to registers of memory controller
    
    ;****************************************************
    ;*	Initialize stacks                               * 
    ;****************************************************    
    
InitStacks
    MRS     r0, cpsr                ; Original PSR value

    BIC     r0, r0, #MODE_BITS      ; Clear the mode bits
    ORR     r0, r0, #ABT_MODE       ; Set ABT mode bits
    MSR     cpsr_c, r0              ; Change the mode
    LDR     sp, =SFE(ABT_STACK)     ; End of ABT_STACK
    
    BIC     r0, r0, #MODE_BITS      ; Clear the mode bits
    ORR     r0, r0, #SVC_MODE       ; Set SVC mode bits
    MSR     cpsr_c, r0              ; Change the mode
    LDR     sp, =SFE(SVC_STACK)     ; End of SVC_STACK

    BIC     r0, r0, #MODE_BITS      ; Clear the mode bits
    ORR     r0, r0, #UND_MODE       ; Set UND mode bits
    MSR     cpsr_c, r0              ; Change the mode
    LDR     sp, =SFE(UND_STACK)     ; End of UND_STACK

    BIC     r0, r0, #MODE_BITS      ; Clear the mode bits
    ORR     r0, r0, #FIQ_MODE       ; Set FIQ mode bits
    MSR     cpsr_c, r0              ; Change the mode
    LDR     sp, =SFE(FIQ_STACK)     ; End of FIQ_STACK

    BIC     r0, r0, #MODE_BITS      ; Clear the mode bits
    ORR     r0, r0, #IRQ_MODE       ; Set IRQ mode bits
    MSR     cpsr_c, r0              ; Change the mode
    LDR     sp, =SFE(IRQ_STACK)     ; End of IRQ_STACK

    BIC     r0 ,r0, #MODE_BITS      ; Clear the mode bits
    ORR     r0 ,r0, #SYS_MODE       ; Set System mode bits
    MSR     cpsr_c, r0              ; Change the mode
    LDR     sp, =SFE(CSTACK)        ; End of CSTACK


    ;********************************************************
    ;*	Copy and paste RW data/zero initialized data	    *
    ;********************************************************
InitRam 
    ldr    r0,= .bss$$Base
    ldr    r0,= .bss$$Limit
    
    ldr    r1,= .data$$Base
    ldr    r4,= .data$$Limit
    ldr    r2,= .data_init$$Base
moveData0   
    cmp    r1,r4   
    ldrcc  r3,[r2],#4
    strcc  r3,[r1],#4

    bcc moveData0
    
    
    ldr    r2,= .data_init$$Limit
    ldr    r3,= .rodata$$Base
    ldr    r3,= .rodata$$Limit
    
    ldr    r0,= .bss$$Base
    ldr    r1,= .bss$$Limit
    mov    r2,#0    
moveData1
    cmp    r0,r1
    strcc  r2,[r0],#4
    bcc    moveData1


   ;MRS R0,cpsr
   ;AND R0,R0,#0xFFFFFF7F
   ;MSR CPSR_c,R0
   
; Continue to ?main for C-level initialization.   
   LDR     r0, =main
   BX      r0
    
HandlerUndef
     b ResetHandler

HandlerSWI
     b SWI_Handler
     
HandlerPabort
     b ResetHandler
     
HandlerDabort
      b ResetHandler
 
HandlerFIQ
   b ResetHandler
   
handlerUndef
    b ResetHandler

;/*************************************************************************/
;/* Entry of IRQ interrupt                                                */
;/*************************************************************************/
SWI_Handler 
    MRS R0,SPSR    ;SPSR的值为SWI之前的CPSR的值，将其取出
    BIC R0,R0,#0X80   ;I位清零，禁止irq
    ORR R0,R0,#0X40   ;F位置一，允许fiq
    MSR SPSR_C,R0  ;修改过的值给SPSR的c域
    MOVS PC,LR    ;返回，S表示用SPSR恢复CPSR

HandlerIRQ
        sub     sp,sp,#4
        stmfd   sp!,{r0}
        ldr     r0,=HandleIRQ
        ldr     r0,[r0]			
        str     r0,[sp,#4]
        ldmfd   sp!,{r0,pc}

SMRDATA DATA
	DCD 0x11991012      ;Bank0=OM[1:0]; Bank1,3,4,5,6,7=16bit; Bank2=8bit; Bank4,5=SRAM
	DCD ((B0_Tacs<<13)+(B0_Tcos<<11)+(B0_Tacc<<8)+(B0_Tcoh<<6)+(B0_Tah<<4)+(B0_Tacp<<2)+(B0_PMC))	;GCS0
	DCD ((B1_Tacs<<13)+(B1_Tcos<<11)+(B1_Tacc<<8)+(B1_Tcoh<<6)+(B1_Tah<<4)+(B1_Tacp<<2)+(B1_PMC))	;GCS1
	DCD ((B2_Tacs<<13)+(B2_Tcos<<11)+(B2_Tacc<<8)+(B2_Tcoh<<6)+(B2_Tah<<4)+(B2_Tacp<<2)+(B2_PMC))	;GCS2
	DCD ((B3_Tacs<<13)+(B3_Tcos<<11)+(B3_Tacc<<8)+(B3_Tcoh<<6)+(B3_Tah<<4)+(B3_Tacp<<2)+(B3_PMC))	;GCS3
	DCD ((B4_Tacs<<13)+(B4_Tcos<<11)+(B4_Tacc<<8)+(B4_Tcoh<<6)+(B4_Tah<<4)+(B4_Tacp<<2)+(B4_PMC))	;GCS4
	DCD ((B5_Tacs<<13)+(B5_Tcos<<11)+(B5_Tacc<<8)+(B5_Tcoh<<6)+(B5_Tah<<4)+(B5_Tacp<<2)+(B5_PMC))	;GCS5
	DCD ((B6_MT<<15)+(B6_Trcd<<2)+(B6_SCAN))                                                        ;GCS6
	DCD ((B7_MT<<15)+(B7_Trcd<<2)+(B7_SCAN))                                                        ;GCS7
	DCD ((REFEN<<23)+(TREFMD<<22)+(Trp<<20)+(Trc<<18)+(Tchr<<16)+REFCNT)
	DCD 0x10			;SCLK for reducing power consumption, BANKSIZE 32M/32M
	DCD 0x20			;CAS Latency=2clk
	DCD 0x20			;CAS Latency=2clk
        
   end
